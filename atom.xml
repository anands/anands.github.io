<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Anand Sudhanaboina]]></title>
  <link href="https://anands.github.io/atom.xml" rel="self"/>
  <link href="https://anands.github.io/"/>
  <updated>2020-07-01T14:43:52+05:30</updated>
  <id>https://anands.github.io/</id>
  <author>
    <name><![CDATA[Anand Sudhanaboina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serve Static Pages on S3 Without .html Extension]]></title>
    <link href="https://anands.github.io/blog/2018/11/18/serve-static-pages-on-s3-without-html-extension/"/>
    <updated>2018-11-18T20:11:56+05:30</updated>
    <id>https://anands.github.io/blog/2018/11/18/serve-static-pages-on-s3-without-html-extension</id>
    <content type="html"><![CDATA[<p>Hosting static HTML pages generated by Jekyll or any other static site generator with pretty permalinks (the one’s without .html) on to S3 would yield into a 404. The reason is that S3 is an object store hence it doesn’t really look up for a .html version of a page’s permalink.</p>

<p>The solution is copying the file to S3 without the .html extension and explicitly setting the content type of the file, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>aws s3 cp index.html s3://bucket/index --content-type <span class="s1">&#39;text/html&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this S3 would send the file contents along with the content-type header set to <code>text/html</code>. To scale, I use the below script which automates this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># In your public or _site directory</span>
</span><span class='line'>aws s3 cp ./ s3://bucket/ --recursive --exclude <span class="s2">&quot;*.html&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file in <span class="k">$(</span>find . -name <span class="s1">&#39;*.html&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s|^\./||&#39;</span><span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    aws s3 cp <span class="k">${</span><span class="nv">file</span><span class="p">%</span><span class="k">}</span> s3://bucket/<span class="k">${</span><span class="nv">file</span><span class="p">%.*</span><span class="k">}</span> --content-type <span class="s1">&#39;text/html&#39;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what it does:</p>

<ol>
<li>Push all the files to S3 excluding all .html files</li>
<li>Iterate all the <code>.html</code> files and push them to S3 without the extension and with content-type</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3 CNAME SSL With CloudFlare]]></title>
    <link href="https://anands.github.io/blog/2018/09/16/s3-cname-ssl-with-cloudflare/"/>
    <updated>2018-09-16T19:20:22+05:30</updated>
    <id>https://anands.github.io/blog/2018/09/16/s3-cname-ssl-with-cloudflare</id>
    <content type="html"><![CDATA[<p>AWS doesn&rsquo;t allow CNAME SSL with static hosting on S3. The only AWS native option is to create a Amazon CloudFront distribution which supports CNAME SSL (AWS ACM or Custom). However, if you happen to or can use CLoudFlare you can do it without the overhead of CloudFront and the cost that comes with it. This however doesn&rsquo;t offer the capablities which CloudFront provides. Here&rsquo;s how to do it:</p>

<h4>Enable S3 for web hosting</h4>

<p>Create a S3 distribution with bucket name same as your domain name. Once you do this, enable static web hosting for the bucket, try to access the bucket using the public link (If you get 403, refer <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html">this</a>).</p>

<h4>CloudFlare setup</h4>

<p>In the CloudFlare DNS dashboard add a CNAME record to the bucket host (where you accessed the bucket in previous step), now you should be able to access the bucket with your cname. Try using https, if it works you&rsquo;re setup is done here, you may want to add a page rule in CloudFlare if you wish to have https only access to the site.</p>

<p>If HTTPS fails, try to check the SSL mode of the CloudFlare account, unless you have Flexible SSL this setup won&rsquo;t work. Now, can you safely change SSL to flexible or if you want to keep it to Full and want flexible to a paricular sub domain, like me, add a page rule like shown below which will only apply flexible SSL onto a paticular domain.</p>

<p><img src="https://anands.github.io/images/ssl-with-s3-and-cloudfront-2.png" alt="" /></p>

<p>My page rules for this setup looks like this, one for force https another for flexible SSL:</p>

<p><img src="https://anands.github.io/images/ssl-with-s3-and-cloudfront-1.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launch Random Chrome Instances Faster]]></title>
    <link href="https://anands.github.io/blog/2017/04/10/launch-random-chrome-instances-faster/"/>
    <updated>2017-04-10T17:54:32+05:30</updated>
    <id>https://anands.github.io/blog/2017/04/10/launch-random-chrome-instances-faster</id>
    <content type="html"><![CDATA[<p>Multiple instances of Chrome can be spun by creating profiles. While working on my new Chrome extension <a href="https://chrome.google.com/webstore/detail/pin-tabs/achoaodpkagkocipghglppnbagjheoni">pin tabs</a>, I found a need to launch new chrome instances to test a few things. Problem with profiles is that Chrome saves them, i.e; you need to delete profiles which you don&rsquo;t need later on, this might get messy if you have quite a many. Here&rsquo;s a quick and simple way to launch and auto-kill chrome instances:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">launch</span><span class="o">-</span><span class="nx">chrome</span><span class="o">-</span><span class="k">new</span><span class="o">-</span><span class="nx">profile</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">hash</span><span class="o">=</span><span class="nx">$</span><span class="p">(</span><span class="nx">head</span> <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">urandom</span> <span class="o">|</span> <span class="nx">tr</span> <span class="o">-</span><span class="nx">dc</span> <span class="nx">A</span><span class="o">-</span><span class="nx">Za</span><span class="o">-</span><span class="nx">z0</span><span class="o">-</span><span class="mi">9</span> <span class="o">|</span> <span class="nx">head</span> <span class="o">-</span><span class="nx">c</span> <span class="mi">32</span> <span class="p">;</span> <span class="nx">echo</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">google</span><span class="o">-</span><span class="nx">chrome</span> <span class="o">--</span><span class="nx">user</span><span class="o">-</span><span class="nx">data</span><span class="o">-</span><span class="nx">dir</span><span class="o">=</span><span class="err">/tmp/chrome-instances/$hash -no-first-run</span>
</span><span class='line'>  <span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">chrome</span><span class="o">-</span><span class="nx">instances</span><span class="o">/</span><span class="nx">$hash</span>
</span><span class='line'>  <span class="nx">unset</span> <span class="nx">hash</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>launch-chrome-new-profile</code> will launch a new chrome instance with data dir <code>/tmp/chrome-instances/$hash</code> with a random hash, once you close this instance the data dir will be auto-deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streamline Log Analysis &amp; Analytics]]></title>
    <link href="https://anands.github.io/blog/2017/01/07/streamline-log-analysis-and-analytics/"/>
    <updated>2017-01-07T11:03:13+05:30</updated>
    <id>https://anands.github.io/blog/2017/01/07/streamline-log-analysis-and-analytics</id>
    <content type="html"><![CDATA[<p>Unified logging is essential when you are scaling your application, this helps in grouping the logs on component (service) level and also providing search capability on multiple services, for example: assume that you have a subscription service which have two internal SOA services, payment service and web service, if the logs are scattered and also assuming that these services are horizontally scaled you will be having hard time to debug these logs, instead if you have unified logging in place, a search on unique indentifier will get the results from all the services, this helps us in quick resolution with less effort. This article will demonstrate a POC which is built using multiple FOSS and with zero custom code to streamline unified logging. Alternatively you might be interested in having a look at <a href="https://www.loggly.com/">Loggly</a>, <a href="https://www.sumologic.com/">Sumo Logic</a> and <a href="https://www.splunk.com/">Splunk</a></p>

<p>FOSS used:</p>

<ul>
<li><a href="https://github.com/influxdata/telegraf">Telegraf</a></li>
<li><a href="http://kafka.apache.org/">Kafka</a></li>
<li><a href="https://www.elastic.co/products/logstash">Logstash</a></li>
<li><a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a></li>
<li><a href="https://www.elastic.co/products/kibana">Kibana</a> / <a href="http://grafana.org/">Grafana</a> (Either or both)</li>
</ul>


<p>Architecture design:</p>

<p><img src="https://anands.github.io/images/log-analysis.svg" alt="" /></p>

<p>Working mechanism overview:</p>

<ol>
<li>Telegraf running on VM instances will <a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/logparser">push logs</a> to <a href="https://github.com/influxdata/telegraf/tree/master/plugins/outputs/kafka">Kafka</a></li>
<li>Logstash will:

<ul>
<li>Read data from Kafka</li>
<li>Modify data if required</li>
<li>Presist data to ElasticSearch</li>
</ul>
</li>
<li>Grafana and / or Kibana will read fetch data from ES based on the queries</li>
</ol>


<p><em>In this example I&rsquo;m using Apache access logs as my source.</em></p>

<p><strong>Step 1: Setup Telegraf:</strong></p>

<p><a href="https://gist.github.com/anands/730207cc3543a477a14fb5b007442042#file-telegraf_installation-txt">Download and install Telegraf if you don&rsquo;t have one running</a>.</p>

<p>Below is the config which you need to add to telegraf.conf (/etc/telegraf/telegraf.conf):</p>

<p><a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/logparser">Log parser input plugin</a> config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[[inputs.logparser]]
</span><span class='line'>  ## files to tail.
</span><span class='line'>  files = [&quot;/var/log/apache2/access.log&quot;]
</span><span class='line'>  ## Read file from beginning.
</span><span class='line'>  from_beginning = true
</span><span class='line'>  name_override = &quot;apache_access_log&quot;
</span><span class='line'>  ## For parsing logstash-style &quot;grok&quot; patterns:
</span><span class='line'>  [inputs.logparser.grok]
</span><span class='line'>    patterns = [&quot;%{COMMON_LOG_FORMAT}&quot;]
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/influxdata/telegraf/tree/master/plugins/outputs/kafka">Kafka output plugin</a> config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[[outputs.kafka]]
</span><span class='line'>  brokers = [&quot;localhost:9092&quot;]
</span><span class='line'>  topic = &quot;logparse&quot;
</span><span class='line'>  compression_codec = 0
</span><span class='line'>  required_acks = -1
</span><span class='line'>  max_retry = 5
</span><span class='line'>  data_format = &quot;json&quot;
</span></code></pre></td></tr></table></div></figure>


<p>If you are not using Telegraf before and just want to test this out, use this (<a href="https://gist.github.com/anands/730207cc3543a477a14fb5b007442042#file-telegraf-conf">telegraf.conf</a>) config file.</p>

<p><strong>Step 3: Setup Kafka:</strong></p>

<p><a href="https://gist.github.com/anands/730207cc3543a477a14fb5b007442042#file-kafka_installation-txt">Download and start Kafka if you don&rsquo;t have one running</a></p>

<p>Create a Kafka topic using the command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/kafka-topics.sh --create --topic logparse --zookeeper localhost:2181 --partitions <span class="m">1</span> --replication-factor 1
</span></code></pre></td></tr></table></div></figure>


<p>Feel free to change the Kafka topic, partitions and replication according to your needs, for example: topics logs-web, logs-payments can be used with different partitions and avaliablity.</p>

<p><strong>Step 4: Setup ElasticSearch:</strong></p>

<p><a href="https://gist.github.com/anands/730207cc3543a477a14fb5b007442042#file-es_installation-txt">Download and start ElasticSearch</a></p>

<p><strong>Step 4: Setup Logstash</strong></p>

<p>For now, I want to analyse the HTTP response codes hence I changed the logstash config accordingly, below is the config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>input {
</span><span class='line'>  kafka {
</span><span class='line'>      topics =&gt; [&#39;logparse&#39;]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output {
</span><span class='line'>  elasticsearch {
</span><span class='line'>      codec =&gt; &#39;json&#39;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>filter {
</span><span class='line'>  json {
</span><span class='line'>      source =&gt; &#39;message&#39;
</span><span class='line'>      remove_field =&gt; [&#39;message&#39;]
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>      add_field =&gt; {&quot;resp_code&quot; =&gt; &quot;%{[tags][1][1]}&quot;}
</span><span class='line'>      }
</span><span class='line'>      mutate {
</span><span class='line'>          convert =&gt; { &quot;resp_code&quot; =&gt; &quot;integer&quot; }
</span><span class='line'>      }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Save this config to a file (logstash-test.yml) and start the logstash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/logstash -f config/logstash-test.yml
</span></code></pre></td></tr></table></div></figure>


<p>References:</p>

<ul>
<li><a href="https://www.elastic.co/guide/en/logstash/current/index.html">Logstash reference guide</a></li>
</ul>


<p><strong>Step 5: Test the flow</strong></p>

<p>Start the telegraf using the command <code>telegraf</code> and make random HTTP requests to the Apache server and see if the data is being presisted to ES.</p>

<p>Here are a few resources:</p>

<ul>
<li>Telegraf log location: /tmp/telegraf.log (If you used the config I used)</li>
<li>Get list of ES indices - <a href="http://localhost:9200/_cat/indices?v">http://localhost:9200/_cat/indices?v</a></li>
<li>Get data of a index - <a href="http://localhost:9200/logstash-2017.01.08/logs/_search?size=1000&amp;pretty=1">http://localhost:9200/logstash-2017.01.08/logs/_search?size=1000&amp;pretty=1</a></li>
</ul>


<p>If everything goes as expected these are a few thing which you should be seeing:</p>

<p>Telegraf writing to Kafka:</p>

<p><img src="https://anands.github.io/images/la-e1.png" alt="" /></p>

<p>Data in ES:</p>

<p><img src="https://anands.github.io/images/la-e2.png" alt="" /></p>

<p><strong>Step 6: Setup Grafana:</strong></p>

<ul>
<li><a href="https://gist.github.com/anands/730207cc3543a477a14fb5b007442042#file-grafana_installation-txt">Install and start Grafana</a></li>
<li>Add ES as data source in Grafana</li>
<li>Add charts and queries</li>
<li>Below is my Grafana board with monitoring of status codes 200 &amp; 400 (Looks good if you have more data):</li>
</ul>


<p><img src="https://anands.github.io/images/la-fullscreen-grafana.png" alt="" /></p>

<p>For Kibana, download and start Kibana, and then add ES as data source and execute queries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup of Dot Files Using Python & Dropbox]]></title>
    <link href="https://anands.github.io/blog/2016/11/20/continuous-backup-of-dot-files-using-python-and-dropbox/"/>
    <updated>2016-11-20T10:12:51+05:30</updated>
    <id>https://anands.github.io/blog/2016/11/20/continuous-backup-of-dot-files-using-python-and-dropbox</id>
    <content type="html"><![CDATA[<p>For developers who have 100&rsquo;s of lines in multiple dot files, backing them up is also important, I&rsquo;ve seen quite a few developers who copy the files to git or explicitly sync them. This works just fine, but it&rsquo;s a manual process and duplication of data. I have multiple dot files (shell files, config files, etc) and I wanted a continuous backup solution which need&rsquo;s zero manual effort.</p>

<p><strong>Update: 2-8-2017</strong></p>

<p>I experimented with Dropbox offical client, which found to be way easier than writing code using Dropbox&rsquo;s API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Download latest dropbox client and start the client:</span>
</span><span class='line'>wget -O - <span class="s2">&quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot;</span> <span class="p">|</span> tar xzf -
</span><span class='line'><span class="nb">cd</span> .dropbox-dist
</span><span class='line'>./dropboxd
</span><span class='line'><span class="c"># Login to your dropbox folder</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the Dropbox client is up and running, create <em>symbolic links</em> of the directory and file you like to backup, example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># optional: cd into dropbox folder</span>
</span><span class='line'>ln -s /etc/apache2/sites-enabled/000-default.conf 000-default.conf
</span><span class='line'>ln -s ~/.bashrc .bashrc
</span></code></pre></td></tr></table></div></figure>


<p>Dropbox will backup the actual files / directories to Dropbox.</p>

<p><strong>Outdated</strong></p>

<p>Below is the Python code which uses Dropbox Python API to push files to Dropbox:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">dropbox</span><span class="o">,</span> <span class="nn">logging</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Constants Config:</span>
</span><span class='line'><span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="s">&quot;[YOUR_DROPBOX_ACCESS_TOKEN]&quot;</span>
</span><span class='line'><span class="n">LOG_FILE</span> <span class="o">=</span> <span class="s">&quot;/var/www/html/backup-to-dropbox/backup2dropbox.log.txt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Login Config:</span>
</span><span class='line'><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">LOG_FILE</span><span class="p">,</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="s">&#39;</span><span class="si">%(asctime)s</span><span class="s"> - </span><span class="si">%(levelname)s</span><span class="s"> - </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">datefmt</span><span class="o">=</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">()</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Starting process!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get dropbox client instance:</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">dropbox</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">DropboxClient</span><span class="p">(</span><span class="n">ACCESS_TOKEN</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># File to backup:</span>
</span><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>  <span class="s">&quot;local&quot;</span> <span class="p">:</span> <span class="s">&quot;/home/anand/.zshcrc&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;remote&quot;</span> <span class="p">:</span> <span class="s">&quot;zshcrc.txt&quot;</span>
</span><span class='line'><span class="p">},{</span>
</span><span class='line'>  <span class="s">&quot;local&quot;</span> <span class="p">:</span> <span class="s">&quot;/home/anand/.shcommons&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;remote&quot;</span> <span class="p">:</span> <span class="s">&quot;shcommons.txt&quot;</span>
</span><span class='line'><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Uploading: &quot;</span> <span class="o">+</span> <span class="nb">file</span><span class="p">[</span><span class="s">&#39;local&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">[</span><span class="s">&#39;local&#39;</span><span class="p">],</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">put_file</span><span class="p">(</span><span class="nb">file</span><span class="p">[</span><span class="s">&#39;remote&#39;</span><span class="p">],</span> <span class="n">f</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.dropbox.com/developers/apps/create">Click here</a> - To create a new app and get the Dropbox access token.</p>

<p>When this Python files is executed it will try to push the set of files in <em>files</em> variable and you can see these in Dropbox app folder which you created. <em>local</em> property in files variable is the local file location, <em>remote</em> is the remote file name.</p>

<p>To automate this process, add the cron expression <code>0 * * * * /use/bin/python dropbox_backup.py</code> in cron tab editor (<code>crontab -e</code>). This will execute the Python script every one hour and pushes the files to Dropbox, however Dropbox client will only update the file in Dropbox if that&rsquo;s a modified version of the existing file in Dropbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Performance Analysis Using CURL]]></title>
    <link href="https://anands.github.io/blog/2016/01/20/network-performance-analysis-using-curl/"/>
    <updated>2016-01-20T13:27:44+05:30</updated>
    <id>https://anands.github.io/blog/2016/01/20/network-performance-analysis-using-curl</id>
    <content type="html"><![CDATA[<p><code>curl</code> can be handy tool to perform network analysis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -o /dev/null  -s -w <span class="s2">&quot;%{time_total}&quot;</span> http://anands.github.io
</span></code></pre></td></tr></table></div></figure>


<p>This will print the total time in seconds that the full operation lasted.</p>

<p>Used flags in this command:</p>

<ol>
<li><p><code>-o</code>: This is used to write output to specified destination, as we are focused on just performance we are writing to <code>/dev/null</code> so the stdout of curl will be ignored.</p></li>
<li><p><code>-s</code>: Meant for silent, this will skip the debug table (in which you can see some stats as well).</p></li>
<li><p><code>-w</code>: This commad defines what to display on stdout after a completed and successful operation. The desired output can be formatted using file or in-inline.</p></li>
</ol>


<p>You can see entire curl doc (supported variables, etc) for <code>-w</code> flag <a href="https://anands.github.io/gist/curl-w-flag-doc/">here</a></p>

<h3>Custom formatting:</h3>

<p>We can feed in the desired format using a file or in-inline, in-inline examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -o /dev/null  -s -w <span class="s2">&quot;%{time_total}&quot;</span> http://anands.github.io
</span><span class='line'>curl -o /dev/null  -s -w <span class="s2">&quot;Total Time: %{time_total}\nDownload Speed: %{speed_download}&quot;</span> http://anands.github.io
</span></code></pre></td></tr></table></div></figure>


<p>To read from a particular file you need to specify it  as &ldquo;@filename&rdquo;, example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -w <span class="s2">&quot;@format.txt&quot;</span> -o /dev/null -s http://anands.github.io/
</span></code></pre></td></tr></table></div></figure>


<p>I used this to log the info in json format, and here&rsquo;s how my <code>format.txt</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;http_code&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{http_code}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;num_connects&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{num_connects}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;remote_ip&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{remote_ip}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;remote_port&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{remote_port}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;size_download&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{size_download}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;size_header&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{size_header}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;time_connect&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{time_connect}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;time_pretransfer&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{time_pretransfer}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;time_starttransfer&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{time_starttransfer}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;time_total&quot;</span> <span class="p">:</span> <span class="s2">&quot;%{time_total}&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sample output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">curl</span> <span class="err">-w</span> <span class="s2">&quot;@format.json&quot;</span> <span class="err">-o</span> <span class="err">/dev/</span><span class="kc">null</span> <span class="err">-s</span> <span class="err">http://anands.github.io/</span> <span class="err">|</span> <span class="err">python</span> <span class="err">-m</span> <span class="err">json.tool</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;http_code&quot;</span><span class="p">:</span> <span class="s2">&quot;200&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;num_connects&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;remote_ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.30.252.154&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;remote_port&quot;</span><span class="p">:</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;size_download&quot;</span><span class="p">:</span> <span class="s2">&quot;7876&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;size_header&quot;</span><span class="p">:</span> <span class="s2">&quot;358&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time_connect&quot;</span><span class="p">:</span> <span class="s2">&quot;0.032&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time_pretransfer&quot;</span><span class="p">:</span> <span class="s2">&quot;0.032&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time_starttransfer&quot;</span><span class="p">:</span> <span class="s2">&quot;1.113&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time_total&quot;</span><span class="p">:</span> <span class="s2">&quot;1.119&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For constant monitoring, create a cron job which runs this command every minute and push data to desired systems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Log Search Using GNU Parallel]]></title>
    <link href="https://anands.github.io/blog/2015/12/01/distributed-log-search-using-gnu-parallel/"/>
    <updated>2015-12-01T12:11:26+05:30</updated>
    <id>https://anands.github.io/blog/2015/12/01/distributed-log-search-using-gnu-parallel</id>
    <content type="html"><![CDATA[<p><a href="http://www.gnu.org/software/parallel/">GNU parallel</a> is a shell tool for executing jobs in parallel using one or more computers. If you have a set of servers to ssh into and run a command in parallel, this tool will help you.</p>

<p>Assuming you have an architecture where several cloud instances are behind LB, but doesn&rsquo;t have a centralized logging sync (Logging into a centralized server or service, like Splunk):</p>

<p><img src="https://anands.github.io/images/N2M0LZD.png" alt="architecture" /></p>

<p>If you need to search the log files across all the servers with one command, GNU Parallel comes very handy saving a lot of time. Here’s how it works:</p>

<ol>
<li><p>Install GNU Parallel. (Below command for Ubuntu)</p>

<blockquote><p>sudo apt-get install parallel</p></blockquote></li>
<li><p>Run the tool:</p>

<blockquote><p>echo &ldquo;command&rdquo; | parallel &ndash;onall &ndash;slf servers.txt</p></blockquote></li>
</ol>


<p>A few other way to run the command:</p>

<ul>
<li>echo “fgrep -Rl <MyQuery> /var/log/” | parallel –onall –slf servers.txt</li>
<li>echo “grep <MyQuery> ~/log.txt” | parallel –onall –slf servers.txt</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reddit's Ranking Algorithm]]></title>
    <link href="https://anands.github.io/blog/2015/11/30/reddits-ranking-algorithm/"/>
    <updated>2015-11-30T12:06:27+05:30</updated>
    <id>https://anands.github.io/blog/2015/11/30/reddits-ranking-algorithm</id>
    <content type="html"><![CDATA[<p>I was curious on how Reddit ranks the front page posts in the “hot” section. <a href="https://github.com/reddit-archive/reddit/blob/master/r2/r2/lib/db/_sorts.pyx">I explored it</a> and found a few interesting things.</p>

<p>Reddit decides the front (hot) page posts by three factors:</p>

<ol>
<li>Up Votes</li>
<li>Down Votes</li>
<li>Posted Date</li>
</ol>


<p>This is the Reddit’s algorithm for hot posts: <a href="https://gist.github.com/anands/d5d763a3c14c48a44bab">explanation</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log10</span><span class="p">,</span> <span class="n">sqrt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
</span><span class='line'>
</span><span class='line'><span class="n">epoch</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">1970</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">epoch_seconds</span><span class="p">(</span><span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Returns the number of seconds from the epoch to date. Should</span>
</span><span class='line'><span class="sd">       match the number returned by the equivalent function in</span>
</span><span class='line'><span class="sd">       postgres.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">td</span> <span class="o">=</span> <span class="n">date</span> <span class="o">-</span> <span class="n">epoch</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">td</span><span class="o">.</span><span class="n">days</span> <span class="o">*</span> <span class="mi">86400</span> <span class="o">+</span> <span class="n">td</span><span class="o">.</span><span class="n">seconds</span> <span class="o">+</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">td</span><span class="o">.</span><span class="n">microseconds</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ups</span> <span class="o">-</span> <span class="n">downs</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hot</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_hot</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">,</span> <span class="n">epoch_seconds</span><span class="p">(</span><span class="n">date</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_hot</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;The hot formula. Should match the equivalent function in postgres.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">)</span>
</span><span class='line'>    <span class="n">order</span> <span class="o">=</span> <span class="n">log10</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sign</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sign</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">seconds</span> <span class="o">=</span> <span class="n">date</span> <span class="o">-</span> <span class="mi">1134028003</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="n">sign</span> <span class="o">*</span> <span class="n">order</span> <span class="o">+</span> <span class="n">seconds</span> <span class="o">/</span> <span class="mi">45000</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This seems very exciting, so I’ve decided to use <a href="https://www.reddit.com/dev/api#GET_search">Reddit search api</a> to get the JSON of a day’s data, then run the algorithm with the data and see if i can see the same front page of the Reddit. Entire day’s data would be huge so I’ve decided to go with a subreddit, I choose <a href="https://www.reddit.com/r/technology">/r/technology</a>. I have the JSON data using Reddit search API and <a href="https://anands.github.io/images/ZNfFkYj.png">taken a screenshot of /r/technology</a> to compare the results.</p>

<p>Now I have 3 things:</p>

<ol>
<li>Reddit ranking algorithm</li>
<li><a href="https://gist.github.com/anands/14ec3c01d3c5af19be4b">Data of /r/technology for a day (sorted based on posted date)</a></li>
<li>Screenshot of /r/technology to compare with generated results</li>
</ol>


<p>I’ve written a python script to do the job.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">reddit</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Load the data:</span>
</span><span class='line'><span class="n">posts</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;data.json&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Out JSON variable:</span>
</span><span class='line'><span class="n">outJson</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Iterate and claculate the hot score:</span>
</span><span class='line'><span class="k">for</span> <span class="n">children</span> <span class="ow">in</span> <span class="n">posts</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span>
</span><span class='line'>        <span class="n">downs</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="s">&quot;data&quot;</span><span class="p">][</span><span class="s">&quot;downs&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">ups</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="s">&quot;data&quot;</span><span class="p">][</span><span class="s">&quot;ups&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="s">&quot;data&quot;</span><span class="p">][</span><span class="s">&quot;title&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">created</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">post</span><span class="p">[</span><span class="s">&quot;data&quot;</span><span class="p">][</span><span class="s">&quot;created&quot;</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">hotScore</span> <span class="o">=</span> <span class="n">hot</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">,</span> <span class="n">created</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="s">&quot;hotScore&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">hotScore</span>
</span><span class='line'>        <span class="n">outJson</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Sort based on hotScore</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sortScore</span><span class="p">(</span><span class="n">json</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">json</span><span class="p">[</span><span class="s">&#39;hotScore&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'><span class="n">outJson</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">sortScore</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Print JSON of top 25 posts:</span>
</span><span class='line'><span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">outJson</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">25</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is one big challenge, Reddit does not reveal the no of down votes, neither in website nor API, so the generated results match closely but not exactly with the screenshot.</p>

<p><a href="https://gist.github.com/anands/496fdcbe44ffa9089292">Now I have 25 hot posts generated by algorithm based on the input data</a>. Out of these 25, 22 matched with the screenshot but not exactly at the same position, this is due to the mismatch of the downvotes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outlier Detection Using Python]]></title>
    <link href="https://anands.github.io/blog/2015/11/26/outlier-detection-using-python/"/>
    <updated>2015-11-26T11:58:43+05:30</updated>
    <id>https://anands.github.io/blog/2015/11/26/outlier-detection-using-python</id>
    <content type="html"><![CDATA[<p>Before writing code I would like to emphasize the difference between anomaly and a outlier:</p>

<ul>
<li><strong>Outlier:</strong> Legitimate data point that’s far away from the mean or median in a distribution.</li>
<li><strong>Anomaly:</strong> Illegitimate data point that’s generated by a different process than whatever generated the rest of the data.</li>
</ul>


<p>Outlier detection varies between single dataset and multiple datasets. In <strong>single dataset outlier detection</strong> we figure out the outliers within the dataset. We can do this by using two methods, <a href="https://en.wikipedia.org/wiki/Median_absolute_deviation">Median Absolute Deviation (MAD)</a> and <a href="https://en.wikipedia.org/wiki/Standard_deviation%20https://en.wikipedia.org/wiki/Cosine_similarity">Standard deviation (SD)</a>. Though MAD and SD give different results they are intended to do the same work. I’m not explaining the mathematical expressions as you can find them from wikipedia.</p>

<p>Let’s consider a sample dataset:</p>

<p><img src="https://anands.github.io/images/OjYLGUW.png" alt="dataset" /></p>

<p>I’ve written a Python script using numpy library, this script calculates both MAD and SD:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Sample Dataset</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Median absolute deviation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mad</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">numpy</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">data</span> <span class="o">-</span> <span class="n">numpy</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">axis</span><span class="p">)),</span> <span class="n">axis</span><span class="p">)</span>
</span><span class='line'><span class="n">_mad</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">numpy</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="o">/</span> <span class="n">mad</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Standard deviation</span>
</span><span class='line'><span class="n">_sd</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">numpy</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="o">/</span> <span class="n">numpy</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">_mad</span>
</span><span class='line'><span class="k">print</span> <span class="n">_sd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s visualize the output:</p>

<p><img src="https://anands.github.io/images/0eylz1t.png" alt="visualize" /></p>

<p>It’s clear that we’ve detected a spike if there is a change in the dataset. After comparing results of several datasets I would like to mention MAD is more sensitive when compared to SD, but more computing intensive. I’ve experimented the same code with 1 M data points, SD performed near to 2x when compared with MAD.</p>

<p><img src="https://anands.github.io/images/zkB3Hyu.png" alt="mad-sd" /></p>

<p><strong>Multiple dataset outlier detection:</strong> In this we figure out anomaly in different datasets when compared with target dataset. For example, say you have data of your web site traffic on hourly basis for 10 days including today, and you would like to figure out if there is an outlier in today’s data when compared with other 9 days data. I’ve done this using <a href="https://en.wikipedia.org/wiki/Mahalanobis_distance">Mahalanobis distance algorithm</a> and implemented using Python with numpy.</p>

<p>Let’s consider sample dataset:</p>

<p><img src="https://anands.github.io/images/32tuL2E.png" alt="multiple-dataset" /></p>

<p>The highlighted path is the target dataset.Let’s feed this to the algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Base dataset</span>
</span><span class='line'><span class="n">dataset</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span>
</span><span class='line'>          <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>        <span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># target: dataset to be compared</span>
</span><span class='line'><span class="n">target</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Avg of SD of each dataset</span>
</span><span class='line'><span class="n">dataset_std</span> <span class="o">=</span> <span class="n">dataset</span><span class="o">.</span><span class="n">std</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Avg of arrays in dataset</span>
</span><span class='line'><span class="n">dataset_sum_avg</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="c"># Create a empty dataset</span>
</span><span class='line'><span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>
</span><span class='line'>    <span class="n">dataset_sum_avg</span> <span class="o">=</span> <span class="n">dataset_sum_avg</span> <span class="o">+</span> <span class="p">(</span> <span class="n">data</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">))</span> <span class="c"># Add up all datapoints of dataset</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Substract the target dataset with avg of datapoints sum and divide by SD</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">dataset_sum_avg</span><span class="p">)</span> <span class="o">/</span> <span class="n">dataset_std</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the outliers, on visualizing the result we get:</p>

<p><img src="https://anands.github.io/images/18reLxS.png" alt="image" /></p>

<p>If you have a look on the data we fed into the algorithm it’s clear that we are able to detect the outliers for today’s input when compared to other x days.</p>

<p>Feel free to explore are a few other algorithms <a href="https://en.wikipedia.org/wiki/Cosine_similarity">Cosine similarity</a>, <a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient">Sørensen–Dice coefficient</a>, <a href="https://en.wikipedia.org/wiki/Jaccard_index">Jaccard index</a>, <a href="https://en.wikipedia.org/wiki/SimRank">SimRank</a> and others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Logging With Python]]></title>
    <link href="https://anands.github.io/blog/2015/11/03/remote-logging-with-python/"/>
    <updated>2015-11-03T11:50:48+05:30</updated>
    <id>https://anands.github.io/blog/2015/11/03/remote-logging-with-python</id>
    <content type="html"><![CDATA[<p>Debugging logs can be formidable task if you run same service on multiple production loads with local logging behind a load balancer, you are only left one option, ssh into different servers and then debug the logs.</p>

<p>Logging to a single server from multiple servers can simply debugging, Python provides a in built functionality for logging, by just adding a few lines to the logging config you will be able to send the log to a remote server and then your remote server need to handle this request. In remote server you can store this logs into flat files or NoSQL</p>

<p>A rudimentary architecture would be:</p>

<p><img src="https://anands.github.io/images/NQOfEuX.png" alt="architecture" /></p>

<p>I’ve created a few code samples to get this done:</p>

<p>Configure a <em>HTTPHandler</em> to the logging handler to send logs to remote server instead of local tty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging.handlers</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&#39;Synchronous Logging&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">http_handler</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">HTTPHandler</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;127.0.0.1:3000&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;/log&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">method</span><span class="o">=</span><span class="s">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">http_handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Log messages:</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&#39;Hey log a warning&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;Hey log a error&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the logging server, I’ve created a simple flask application which can handle a post request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/log&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assuming the server is up and you send a log request, this is how the log structure looks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;relativeCreated&quot;</span><span class="p">:</span> <span class="s2">&quot;52.1631240845&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;process&quot;</span><span class="p">:</span> <span class="s2">&quot;10204&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="s2">&quot;()&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;module&quot;</span><span class="p">:</span> <span class="s2">&quot;km&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;funcName&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;module&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;exc_text&quot;</span><span class="p">:</span> <span class="s2">&quot;None&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Synchronous Logging&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;thread&quot;</span><span class="p">:</span> <span class="s2">&quot;139819818469184&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;1446532937.04&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;threadName&quot;</span><span class="p">:</span> <span class="s2">&quot;MainThread&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;msecs&quot;</span><span class="p">:</span> <span class="s2">&quot;37.367105484&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;filename&quot;</span><span class="p">:</span> <span class="s2">&quot;km.py&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;levelno&quot;</span><span class="p">:</span> <span class="s2">&quot;40&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;processName&quot;</span><span class="p">:</span> <span class="s2">&quot;MainProcess&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;pathname&quot;</span><span class="p">:</span> <span class="s2">&quot;km.py&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;lineno&quot;</span><span class="p">:</span> <span class="s2">&quot;13&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;msg&quot;</span><span class="p">:</span> <span class="s2">&quot;Hey log a error&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;exc_info&quot;</span><span class="p">:</span> <span class="s2">&quot;None&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;levelname&quot;</span><span class="p">:</span> <span class="s2">&quot;ERROR&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Important properties of this structure would be msg, name &amp; level. Property name is what you pass to getLogger function, and level would the level of logging (error = 40, warning = 30, etc).</p>

<p>This approach is synchronized, if you want logging to be async use threads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">logging</span><span class="o">,</span> <span class="nn">thread</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging.handlers</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&#39;Asynchronous Logging&#39;</span><span class="p">)</span> <span class="c"># Name</span>
</span><span class='line'><span class="n">http_handler</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">HTTPHandler</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;127.0.0.1:3000&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;/log&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">method</span><span class="o">=</span><span class="s">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">http_handler</span><span class="p">)</span>
</span><span class='line'><span class="n">thread</span><span class="o">.</span><span class="n">start_new_thread</span><span class="p">(</span> <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="p">(</span><span class="s">&quot;Log error&quot;</span><span class="p">,))</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c"># Just to keep main thread alive.</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this way we need not bother about storage of application server (If you are not storing any data to FS then logs would be the only thing) and debugging would be easy.</p>

<p>Save to mongo to perform analytics and / or to perform quick queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mongo setup:</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">()</span>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="s">&#39;logs&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="s">&#39;testlog&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/log&#39;</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>  <span class="c"># Convert form POST object into a representation suitable for mongodb</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">))</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">insert_one</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">response</span><span class="o">.</span><span class="n">inserted_id</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.git Is Dangerous]]></title>
    <link href="https://anands.github.io/blog/2015/07/29/dot-git-is-dangerous/"/>
    <updated>2015-07-29T11:43:57+05:30</updated>
    <id>https://anands.github.io/blog/2015/07/29/dot-git-is-dangerous</id>
    <content type="html"><![CDATA[<p>Git is fantastic, but it could be dangerous. Let&rsquo;s search for something on Google:</p>

<blockquote><p>“.git” intitle:“Index of”</p></blockquote>

<p>This Google dork will list of all websites which has their .git folders exposed to the web.</p>

<p><img src="https://anands.github.io/images/ns97gx9AJF1swdta0_400.png" alt="public-dot-git-google" /></p>

<p>Git is not to be blamed here, but the poor server configurations. This may not be alarming to novice devs but we will be able to generate the entire score code using this trick. Let’s see how:</p>

<ol>
<li>You can download the entire .git directory using wget: <code>wget -r –no-parent http://example.com/.git</code></li>
<li>Run: git log and copy the recent commit hash:
<img src="https://anands.github.io/images/ns98ekm8zk1swdta0_500.png" alt="git-head-commit" /></li>
<li>And then the final command: <code>git reset –hard &lt;HASH&gt;</code>, in my case: <code>git reset –hard 674d17771ad65bb73f4c6b96644d69d7ff19351b</code> to restore the files</li>
</ol>


<p>Server admins should add adequate config to protect the <code>.git</code> folder, ideally .git should never be part of build / hosted. Apache users can add the below line to your configuration to deny access to .git folder.</p>

<blockquote><p>RewriteRule ^(.*/)?.git+ - [R=404,L]</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cdnjs Snippets for Sublime Text]]></title>
    <link href="https://anands.github.io/blog/2015/04/01/cdnjs-snippets-for-sublime-text/"/>
    <updated>2015-04-01T11:36:58+05:30</updated>
    <id>https://anands.github.io/blog/2015/04/01/cdnjs-snippets-for-sublime-text</id>
    <content type="html"><![CDATA[<p><strong>[DEPRECATED]</strong></p>

<p><a href="https://cdnjs.com/">cdnjs</a> is a productive CDN for web developers. However, it takes time to visit cdnjs, search for the libray and copy the link.</p>

<p>Instead we can use sublime snippets for all libraries avaliable on cdnjs.com (Total:1103, as of 01-03-2015).</p>

<p>Steps for installation:</p>

<ol>
<li>Clone the <a href="https://github.com/anands/cdnjs-sublime">cdnjs-sublime</a> repo</li>
<li>Copy all the snippets from snippets folder to the local sublime snippets folder.</li>
</ol>


<p><img src="https://anands.github.io/images/cdnjs_sublime.gif" alt="cdnjs-sublime.gif" /></p>
]]></content>
  </entry>
  
</feed>
